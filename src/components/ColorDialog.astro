---
import Colors from "@/assets/Colors.astro";
import Dots from "@/assets/Dots.astro";
import Share from "@/assets/Share.astro";
---

<div id="outer-dialog" class="fixed inset-0 z-20 hidden"></div>
<div
  data-color='{"r":0,"g":0,"b":0}'
  id="colorDialog"
  class="fixed bottom-0 z-30 flex max-h-9/12 w-full translate-y-full flex-col gap-2 rounded-tl-3xl rounded-tr-3xl bg-white text-neutral-900 shadow transition-transform duration-300 overflow-clip"
>
  <figure
    id="colorPreview"
    class="aspect-video w-full border border-neutral-800/10 px-5"
  >
  </figure>

  <h1 id="colorName" class="mt-2 px-5 text-lg font-bold capitalize"></h1>

  <div class="flex w-full items-center gap-2 px-5">
    <button
      id="save_color"
      class="flex grow items-center justify-center gap-1 rounded-full border border-neutral-900/20 p-3"
    >
      <Colors class="size-5" />
      <p class="text-sm">Guardar color</p>
    </button>

    <button id="share" class="rounded-full border border-neutral-900/20 p-3">
      <Share class="size-5" />
    </button>
  </div>

  <ul class="mt-4 flex flex-col overflow-y-auto px-5 pb-5 border-t border-neutral-900/10">
    <li class="flex flex-col border-b border-neutral-900/10 py-2">
      <p class="text-xs font-semibold text-neutral-600">RGB</p>

      <button id="rgbOut" class="flex w-full items-center justify-between">
        <p>rgb(0, 0, 0)</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>

    <li class="flex flex-col border-b border-neutral-900/10 py-2">
      <p class="text-xs font-semibold text-neutral-600">HEX</p>

      <button id="hexOut" class="flex w-full items-center justify-between">
        <p>#000000</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>

    <li class="flex flex-col border-b border-neutral-900/10 py-2">
      <p class="text-xs font-semibold text-neutral-600">CMYK</p>

      <button id="cmykOut" class="flex w-full items-center justify-between">
        <p>0C 0M 0Y 0K</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>

    <li class="flex flex-col border-b border-neutral-900/10 py-2">
      <p class="text-xs font-semibold text-neutral-600">Pantone</p>

      <button id="pantoneOut" class="flex w-full items-center justify-between">
        <p>Pantone 0</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>

    <li class="flex flex-col border-b border-neutral-900/10 py-2">
      <p class="text-xs font-semibold text-neutral-600">RAL</p>

      <button id="ralOut" class="flex w-full items-center justify-between">
        <p>RAL 0</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>

    <li class="flex flex-col border-b border-neutral-900/10 py-2">
      <p class="text-xs font-semibold text-neutral-600">LAB</p>

      <button id="labOut" class="flex w-full items-center justify-between">
        <p>lab(0% 0 0)</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>

    <li class="flex flex-col py-2">
      <p class="text-xs font-semibold text-neutral-600">HSL</p>

      <button id="hslOut" class="flex w-full items-center justify-between">
        <p>hsl(0 0% 0%)</p>
        <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
      </button>
    </li>
  </ul>
</div>

<style>
  ul {
    scrollbar-width: none;
  }
</style>

<script>
  import { saveColor, toaster } from "@/lib/utils";
  import { toast_messages } from "@/lib/consts";
  import { nanoid } from "nanoid";
  import {
    rgbToCmyk,
    rgbToHex,
    rgbToHsl,
    rgbToLab,
    rgbToName,
    rgbToPantone,
    rgbToRal,
    rgbToRgb,
  } from "@/lib/colors";

  const hunterButton = document.querySelector("#color_output") as HTMLElement;
  const outerDialog = document.querySelector("#outer-dialog") as HTMLElement;
  const colorDialog = document.querySelector("#colorDialog") as HTMLElement;

  const colorPreview = document.querySelector("#colorPreview") as HTMLElement;
  const colorName = document.querySelector("#colorName") as HTMLElement;

  const rgbOutButton = document.querySelector("#rgbOut") as HTMLElement;
  const rgbOut = rgbOutButton.querySelector("p") as HTMLElement;
  const hexOutButton = document.querySelector("#hexOut") as HTMLElement;
  const hexOut = hexOutButton.querySelector("p") as HTMLElement;
  const cmykOutButton = document.querySelector("#cmykOut") as HTMLElement;
  const cmykOut = cmykOutButton.querySelector("p") as HTMLElement;
  const pantoneOutButton = document.querySelector("#pantoneOut") as HTMLElement;
  const pantoneOut = pantoneOutButton.querySelector("p") as HTMLElement;
  const ralOutButton = document.querySelector("#ralOut") as HTMLElement;
  const ralOut = ralOutButton.querySelector("p") as HTMLElement;
  const labOutButton = document.querySelector("#labOut") as HTMLElement;
  const labOut = labOutButton.querySelector("p") as HTMLElement;
  const hslOutButton = document.querySelector("#hslOut") as HTMLElement;
  const hslOut = hslOutButton.querySelector("p") as HTMLElement;

  const saveColorButton = document.querySelector("#save_color") as HTMLElement;
  const shareButton = document.querySelector("#share") as HTMLElement;

  let rgb_values = { r: 0, g: 0, b: 0 };

  hunterButton.addEventListener("click", () => {
    hunterButton.dataset.running = "false";

    const color = colorDialog.dataset.color!;
    console.log(color);

    const { r, g, b } = JSON.parse(color);
    rgb_values = { r, g, b };

    colorPreview.style.backgroundColor = rgbToRgb(rgb_values);
    colorName.textContent = rgbToName(rgb_values);
    rgbOut.textContent = rgbToRgb(rgb_values);
    hexOut.textContent = rgbToHex(rgb_values);
    cmykOut.textContent = rgbToCmyk(rgb_values);
    pantoneOut.textContent = rgbToPantone(rgb_values);
    ralOut.textContent = rgbToRal(rgb_values);
    labOut.textContent = rgbToLab(rgb_values);
    hslOut.textContent = rgbToHsl(rgb_values);

    colorDialog.classList.add("active");
    outerDialog.classList.remove("hidden");
  });

  outerDialog.addEventListener("click", () => {
    hunterButton.dataset.running = "true";
    colorDialog.classList.remove("active");
    outerDialog.classList.add("hidden");
  });

  rgbOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToRgb(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  hexOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToHex(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  cmykOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToCmyk(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  pantoneOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToPantone(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  ralOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToRal(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  labOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToLab(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  hslOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToHsl(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  saveColorButton.addEventListener("click", () => {
    if (!colorName.textContent) return;

    const promp = prompt(
      "Escribe un nombre para tu color",
      colorName.textContent
    );
    if (!promp) return;

    const color = {
      id: nanoid(),
      name: promp,
      rgb: rgb_values,
    };

    saveColor(color);
  });

  shareButton.addEventListener("click", () => {
    const { r, g, b } = rgb_values;
    const shareData = {
      url: `${window.location.href}colors/${r}-${g}-${b}`,
    };

    navigator.share(shareData);
  });
</script>
