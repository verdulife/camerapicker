---
import Layout from "@/layouts/Layout.astro";
---

<Layout>
  <section class="relative size-full">
    <video
      class="absolute top-0 left-0 size-auto"
      playsinline
      autoplay
      muted
    >
    </video>

    <canvas class="pointer-events-none absolute inset-0"></canvas>

    <footer
      class="absolute right-0 bottom-6 left-0 mx-auto flex max-w-2xs items-center gap-6 overflow-clip rounded-lg bg-white"
    >
      <picture class="size-20"></picture>
      <aside class="text-lg font-medium text-black">
        <p id="rgbOut">rgb(0, 0, 0)</p>
      </aside>
    </footer>
  </section>
</Layout>

<script>
  const video = document.querySelector("video") as HTMLVideoElement;
  const canvas = document.querySelector("canvas") as HTMLCanvasElement;
  const picture = document.querySelector("picture") as HTMLPictureElement;
  const rgbOut = document.querySelector("#rgbOut") as HTMLParagraphElement;
  const ctx = canvas.getContext("2d");

  let selection = { x: 0, y: 0, size: 65, zoom: 2 };
  let targetSelection = { x: 0, y: 0 };

  const { innerWidth, innerHeight } = window;

  const stream = await navigator.mediaDevices.getUserMedia({
    video: {
      facingMode: "environment",
      width: innerWidth,
      height: innerHeight,
    },
    audio: false,
  });

  video.srcObject = stream;

  canvas.width = innerWidth;
  canvas.height = innerHeight;

  video.addEventListener("loadedmetadata", () => {
    selection.x = targetSelection.x = innerWidth / 2 - selection.size;
    selection.y = targetSelection.y = innerHeight / 2 - selection.size;

    drawSelection();
    animateSelection();
    analyzeColor();
  });

  function drawSelection() {
    if (!ctx) return;
    ctx.clearRect(0, 0, innerWidth, innerHeight);

    const zoomCanvas = document.createElement("canvas");
    const zoomCtx = zoomCanvas.getContext("2d");

    zoomCanvas.width = selection.size;
    zoomCanvas.height = selection.size;

    if (!zoomCtx) return;

    zoomCtx.imageSmoothingEnabled = true;
    zoomCtx.drawImage(
      video,
      selection.x + selection.size / selection.zoom,
      selection.y + selection.size / selection.zoom,
      selection.size,
      selection.size,
      0,
      0,
      zoomCanvas.width * selection.zoom,
      zoomCanvas.height * selection.zoom
    );

    zoomCtx.strokeStyle = "white";
    zoomCtx.lineWidth = 1;
    zoomCtx.strokeRect(0, 0, zoomCanvas.width, zoomCanvas.height);

    ctx.drawImage(
      zoomCanvas,
      selection.x,
      selection.y,
      selection.size * selection.zoom,
      selection.size * selection.zoom
    );
  }

  function analyzeColor() {
    if (!ctx) return;

    const imageData = ctx.getImageData(
      selection.x,
      selection.y,
      selection.size,
      selection.size
    );
    const pixels = imageData.data;

    let r = 0,
      g = 0,
      b = 0,
      a = 0;
    const totalPixels = selection.size * selection.size;

    for (let i = 0; i < pixels.length; i += 4) {
      r += pixels[i];
      g += pixels[i + 1];
      b += pixels[i + 2];
      a += pixels[i + 3];
    }

    r = Math.floor(r / totalPixels);
    g = Math.floor(g / totalPixels);
    b = Math.floor(b / totalPixels);
    a = Math.floor(a / totalPixels);

    console.log(`RGBA: (${r}, ${g}, ${b}, ${a})`);
    printResult({ r, g, b });
    requestAnimationFrame(analyzeColor);
  }

  function printResult({ r, g, b }: { r: number; g: number; b: number }) {
    picture.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
    rgbOut.textContent = `rgb(${r}, ${g}, ${b})`;
  }

  function animateSelection() {
    selection.x += (targetSelection.x - selection.x) * 0.2;
    selection.y += (targetSelection.y - selection.y) * 0.2;
    drawSelection();
    requestAnimationFrame(animateSelection);
  }

  function updateSelection(event: MouseEvent | TouchEvent) {
    const clientX =
      "touches" in event ? event.touches[0].clientX : event.clientX;
    const clientY =
      "touches" in event ? event.touches[0].clientY : event.clientY;

    targetSelection.x = clientX - selection.size;
    targetSelection.y = clientY - selection.size;
  }

  video.addEventListener("click", updateSelection);
  video.addEventListener("touchstart", updateSelection);
</script>
