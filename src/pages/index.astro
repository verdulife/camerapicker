---
import Layout from "@/layouts/Layout.astro";
import ColorDialog from "@/components/ColorDialog.astro";
---

<Layout>
  <section class="bg-violet relative h-svh w-full overflow-clip">
    <video
      playsinline
      autoplay
      muted
      class="absolute top-0 left-0 size-full border-2 border-green-500 object-cover"
    >
    </video>

    <canvas
      class="pointer-events-none absolute top-0 left-0 border-5 border-red-500"
    ></canvas>

    <ColorDialog />

    <pre
      id="debug"
      class="fixed top-0 right-0 z-50 border border-neutral-800/10 bg-black/50 p-3 font-mono text-sm text-white">
    </pre>
  </section>
</Layout>

<style is:inline>
  #colorDialog.active {
    translate: 0;
  }
</style>

<script>
  import { rgbToRgb } from "@/lib/colors";
  import { isTouchDevice } from "@/lib/consts";
  import ColorThief from "colorthief";

  const video = document.querySelector("video") as HTMLVideoElement;
  const canvas = document.querySelector("canvas") as HTMLCanvasElement;

  const hunterButton = document.querySelector("#color_output") as HTMLElement;
  const colorDialog = document.querySelector("#colorDialog") as HTMLElement;

  const ctx = canvas.getContext("2d", {
    willReadFrequently: true,
    colorSpace: "display-p3",
  });
  const zoomCanvas = document.createElement("canvas");
  const zoomCtx = zoomCanvas.getContext("2d", {
    colorSpace: "display-p3",
  });
  const { innerWidth, innerHeight } = window;
  const aspectRatio =
    innerWidth > innerHeight
      ? innerWidth / innerHeight
      : innerHeight / innerWidth;

  let selection = { x: 0, y: 0, size: 65, zoom: 1.25 };
  let targetSelection = { x: 0, y: 0 };
  let rgb_values = { r: 0, g: 0, b: 0 };

  /* const videoOpts = isTouchDevice
    ? {
        facingMode: "environment",
        aspectRatio: innerHeight / innerWidth,
      }
    : {
        facingMode: "environment",
        aspectRatio: innerWidth / innerHeight,
        width: innerWidth,
      }; */

  const stream = await navigator.mediaDevices.getUserMedia({
    audio: false,
    video: {
      facingMode: "environment",
      aspectRatio,
    },
  });

  video.srcObject = stream;

  video.addEventListener("play", () => {
    if (!ctx) return;

    const { videoWidth, videoHeight } = video;
    const scaleX = innerWidth / videoWidth;
    const scaleY = innerHeight / videoHeight;
    canvas.width = innerWidth;
    canvas.height = innerHeight;

    ctx.scale(scaleX, scaleY);

    selection.x = targetSelection.x =
      innerWidth / 2 - (selection.size * selection.zoom) / 2;
    selection.y = targetSelection.y =
      innerHeight / 2 - selection.size * selection.zoom;

    drawSelection();
    animateSelection();
    analyzeColor();

    const debug = document.querySelector("#debug") as HTMLElement;
    debug.textContent = JSON.stringify(
      {
        videoWidth,
        videoHeight,
        innerWidth,
        innerHeight,
        canvasWidth: canvas.width,
        canvasHeight: canvas.height,
        scaleX,
        scaleY,
        ctxWidth: ctx.canvas.width,
        ctxHeight: ctx.canvas.height,
      },
      null,
      2
    );
  });

  function drawSelection() {
    if (!ctx || !zoomCtx) return;

    ctx.clearRect(0, 0, innerWidth, innerHeight);

    zoomCanvas.width = selection.size;
    zoomCanvas.height = selection.size;

    zoomCtx.imageSmoothingEnabled = true;
    zoomCtx.save();
    zoomCtx.beginPath();
    zoomCtx.arc(
      zoomCanvas.width / 2,
      zoomCanvas.height / 2,
      zoomCanvas.width / 2,
      0,
      Math.PI * 2
    );
    zoomCtx.closePath();
    zoomCtx.clip();

    zoomCtx.drawImage(
      video,
      selection.x + selection.size / 4,
      selection.y + selection.size / 4,
      selection.size,
      selection.size,
      0,
      0,
      zoomCanvas.width * selection.zoom,
      zoomCanvas.height * selection.zoom
    );

    zoomCtx.restore();
    zoomCtx.strokeStyle = "white";
    zoomCtx.lineWidth = 1;
    zoomCtx.beginPath();
    zoomCtx.arc(
      zoomCanvas.width / 2,
      zoomCanvas.height / 2,
      zoomCanvas.width / 2,
      0,
      Math.PI * 2
    );
    zoomCtx.stroke();

    zoomCtx.strokeStyle = "rgba(255, 255, 255, 0.1)";
    zoomCtx.lineWidth = 0.4;

    const gridSize = 6;
    const numLinesX = zoomCanvas.width / gridSize;
    const numLinesY = zoomCanvas.height / gridSize;

    for (let i = 0; i <= numLinesX; i++) {
      zoomCtx.beginPath();
      zoomCtx.moveTo(i * gridSize, 0);
      zoomCtx.lineTo(i * gridSize, zoomCanvas.height);
      zoomCtx.stroke();
    }

    for (let i = 0; i <= numLinesY; i++) {
      zoomCtx.beginPath();
      zoomCtx.moveTo(0, i * gridSize);
      zoomCtx.lineTo(zoomCanvas.width, i * gridSize);
      zoomCtx.stroke();
    }

    ctx.save();
    ctx.beginPath();
    ctx.arc(
      selection.x + (selection.size * selection.zoom) / 2,
      selection.y + (selection.size * selection.zoom) / 2,
      (selection.size * selection.zoom) / 2,
      0,
      Math.PI * 2
    );
    ctx.closePath();
    ctx.clip();

    ctx.drawImage(
      zoomCanvas,
      selection.x,
      selection.y,
      selection.size * selection.zoom,
      selection.size * selection.zoom
    );
    ctx.restore();

    ctx.strokeStyle = "white";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.arc(
      selection.x + (selection.size * selection.zoom) / 2,
      selection.y + (selection.size * selection.zoom) / 2,
      (selection.size * selection.zoom) / 2,
      0,
      Math.PI * 2
    );
    ctx.stroke();
  }

  async function analyzeColor() {
    if (!ctx) return;

    ctx.getImageData(selection.x, selection.y, selection.size, selection.size);

    const img = new Image();
    img.src = canvas.toDataURL();

    await new Promise((resolve) => {
      img.onload = () => {
        const colorThief = new ColorThief();
        const [r, g, b] = colorThief.getColor(img)!;
        rgb_values = { r, g, b };
        resolve(rgb_values);
      };
    });

    printResult();
    requestAnimationFrame(analyzeColor);
  }

  function printResult() {
    const rgb = rgbToRgb(rgb_values);

    colorDialog.dataset.color = JSON.stringify(rgb_values);
    hunterButton.style.backgroundColor = rgb;
  }

  function animateSelection() {
    selection.x += (targetSelection.x - selection.x) * 0.2;
    selection.y += (targetSelection.y - selection.y) * 0.2;
    drawSelection();
    requestAnimationFrame(animateSelection);
  }

  function updateSelection(event: MouseEvent | TouchEvent) {
    const clientX =
      "touches" in event ? event.touches[0].clientX : event.clientX;
    const clientY =
      "touches" in event ? event.touches[0].clientY : event.clientY;

    targetSelection.x = clientX - (selection.size * selection.zoom) / 2;
    targetSelection.y = clientY - (selection.size * selection.zoom) / 2;
  }

  video.addEventListener("click", updateSelection);
</script>
