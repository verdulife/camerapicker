---
import Layout from "@/layouts/Layout.astro";
---

<Layout>
  <section class="bg-violet relative h-svh w-full overflow-clip rounded-3xl">
    <header
      class="absolute top-0 left-0 z-20 flex w-full -translate-y-full justify-center p-4 transition-transform"
    >
      <p
        class="rounded-full border border-neutral-50/10 bg-neutral-950 px-6 py-3 text-center text-sm font-medium backdrop-blur"
      >
        âœ… Color copiado
      </p>
    </header>

    <video
      playsinline
      autoplay
      muted
      class="absolute top-0 left-0 size-full object-cover"
    >
    </video>

    <canvas class="pointer-events-none absolute inset-0"></canvas>
  </section>
</Layout>

<style>
  header.active {
    translate: 0;
  }
</style>

<script>
  import type { ColorSpace } from "@/lib/types";
  import { rgbToHex, rgbToCmyk } from "@/lib/colors";
  import { isTouchDevice, saveColorSpace, loadColorSpace } from "@/lib/utils";

  const video = document.querySelector("video") as HTMLVideoElement;
  const canvas = document.querySelector("canvas") as HTMLCanvasElement;
  const button = document.querySelector("#color_output") as HTMLButtonElement;
  const select = document.querySelector(
    "#colorspace_selector"
  ) as HTMLSelectElement;
  const rgbOut = document.querySelector("[value='rgb']") as HTMLOptionElement;
  const hexOut = document.querySelector("[value='hex']") as HTMLOptionElement;
  const cmykOut = document.querySelector("[value='cmyk']") as HTMLOptionElement;
  const header = document.querySelector("header") as HTMLElement;
  const ctx = canvas.getContext("2d", { willReadFrequently: true });
  const zoomCanvas = document.createElement("canvas");
  const zoomCtx = zoomCanvas.getContext("2d");
  const { innerWidth, innerHeight } = window;

  let selection = { x: 0, y: 0, size: 65, zoom: 1.25 };
  let targetSelection = { x: 0, y: 0 };
  let rgb_values = { r: 0, g: 0, b: 0 };
  let currentColorSpace: ColorSpace = loadColorSpace();
  select.value = currentColorSpace;

  const videoOpts = isTouchDevice
    ? {
        facingMode: "environment",
        aspectRatio: innerHeight / innerWidth,
      }
    : {
        facingMode: "environment",
        aspectRatio: innerWidth / innerHeight,
        width: innerWidth,
      };

  const stream = await navigator.mediaDevices.getUserMedia({
    audio: false,
    video: videoOpts,
  });

  video.srcObject = stream;

  video.addEventListener("play", () => {
    if (!ctx) return;

    const { videoWidth, videoHeight } = video;
    const scaleX = innerWidth / videoWidth;
    const scaleY = innerHeight / videoHeight;
    canvas.width = innerWidth;
    canvas.height = innerHeight;

    ctx.scale(scaleX, scaleY);

    selection.x = targetSelection.x =
      innerWidth / 2 - (selection.size * selection.zoom) / 2;
    selection.y = targetSelection.y =
      innerHeight / 2 - selection.size * selection.zoom;

    drawSelection();
    animateSelection();
    analyzeColor();
  });

  function drawSelection() {
    if (!ctx || !zoomCtx) return;

    ctx.clearRect(0, 0, innerWidth, innerHeight);

    zoomCanvas.width = selection.size;
    zoomCanvas.height = selection.size;

    zoomCtx.imageSmoothingEnabled = true;
    zoomCtx.save();
    zoomCtx.beginPath();
    zoomCtx.arc(
      zoomCanvas.width / 2,
      zoomCanvas.height / 2,
      zoomCanvas.width / 2,
      0,
      Math.PI * 2
    );
    zoomCtx.closePath();
    zoomCtx.clip();

    zoomCtx.drawImage(
      video,
      selection.x + selection.size / 4,
      selection.y + selection.size / 4,
      selection.size,
      selection.size,
      0,
      0,
      zoomCanvas.width * selection.zoom,
      zoomCanvas.height * selection.zoom
    );

    zoomCtx.restore();
    zoomCtx.strokeStyle = "white";
    zoomCtx.lineWidth = 1;
    zoomCtx.beginPath();
    zoomCtx.arc(
      zoomCanvas.width / 2,
      zoomCanvas.height / 2,
      zoomCanvas.width / 2,
      0,
      Math.PI * 2
    );
    zoomCtx.stroke();

    zoomCtx.strokeStyle = "rgba(255, 255, 255, 0.1)";
    zoomCtx.lineWidth = 0.4;

    const gridSize = 6;
    const numLinesX = zoomCanvas.width / gridSize;
    const numLinesY = zoomCanvas.height / gridSize;

    for (let i = 0; i <= numLinesX; i++) {
      zoomCtx.beginPath();
      zoomCtx.moveTo(i * gridSize, 0);
      zoomCtx.lineTo(i * gridSize, zoomCanvas.height);
      zoomCtx.stroke();
    }

    for (let i = 0; i <= numLinesY; i++) {
      zoomCtx.beginPath();
      zoomCtx.moveTo(0, i * gridSize);
      zoomCtx.lineTo(zoomCanvas.width, i * gridSize);
      zoomCtx.stroke();
    }

    ctx.save();
    ctx.beginPath();
    ctx.arc(
      selection.x + (selection.size * selection.zoom) / 2,
      selection.y + (selection.size * selection.zoom) / 2,
      (selection.size * selection.zoom) / 2,
      0,
      Math.PI * 2
    );
    ctx.closePath();
    ctx.clip();

    ctx.drawImage(
      zoomCanvas,
      selection.x,
      selection.y,
      selection.size * selection.zoom,
      selection.size * selection.zoom
    );
    ctx.restore();

    ctx.strokeStyle = "white";
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.arc(
      selection.x + (selection.size * selection.zoom) / 2,
      selection.y + (selection.size * selection.zoom) / 2,
      (selection.size * selection.zoom) / 2,
      0,
      Math.PI * 2
    );
    ctx.stroke();
  }

  function analyzeColor() {
    if (!ctx) return;

    const imageData = ctx.getImageData(
      selection.x,
      selection.y,
      selection.size,
      selection.size
    );

    const pixels = imageData.data;
    const totalPixels = selection.size * selection.size;

    let r = 0,
      g = 0,
      b = 0;

    for (let i = 0; i < pixels.length; i += 4) {
      r += pixels[i];
      g += pixels[i + 1];
      b += pixels[i + 2];
    }

    r = Math.floor(r / totalPixels);
    g = Math.floor(g / totalPixels);
    b = Math.floor(b / totalPixels);

    rgb_values = { r, g, b };
    printResult();
    requestAnimationFrame(analyzeColor);
  }

  function printResult() {
    const { r, g, b } = rgb_values;

    button.style.backgroundColor = `rgb(${r}, ${g}, ${b})`;
    rgbOut.innerHTML = `rgb(${r}, ${g}, ${b})`;
    hexOut.innerHTML = rgbToHex({ r, g, b });
    cmykOut.innerHTML = rgbToCmyk({ r, g, b });
  }

  function animateSelection() {
    selection.x += (targetSelection.x - selection.x) * 0.2;
    selection.y += (targetSelection.y - selection.y) * 0.2;
    drawSelection();
    requestAnimationFrame(animateSelection);
  }

  function updateSelection(event: MouseEvent | TouchEvent) {
    const clientX =
      "touches" in event ? event.touches[0].clientX : event.clientX;
    const clientY =
      "touches" in event ? event.touches[0].clientY : event.clientY;

    targetSelection.x = clientX - (selection.size * selection.zoom) / 2;
    targetSelection.y = clientY - (selection.size * selection.zoom) / 2;
  }

  video.addEventListener("click", updateSelection);
  video.addEventListener("touchstart", updateSelection);

  select.addEventListener("change", (event: any) => {
    currentColorSpace = event.target.value;
    saveColorSpace(currentColorSpace);
  });

  button.addEventListener("click", () => {
    const { r, g, b } = rgb_values;

    if (currentColorSpace === "rgb")
      navigator.clipboard.writeText(`rgb(${r}, ${g}, ${b})`);
    if (currentColorSpace === "hex")
      navigator.clipboard.writeText(rgbToHex({ r, g, b }));
    if (currentColorSpace === "cmyk")
      navigator.clipboard.writeText(rgbToCmyk({ r, g, b }));

    header.classList.add("active");

    setTimeout(() => {
      header.classList.remove("active");
    }, 2000);
  });
</script>
