---
export const prerender = false;

import Layout from "@/layouts/Layout.astro";
import Dots from "@/assets/Dots.astro";
import Colors from "@/assets/Colors.astro";
import Share from "@/assets/Share.astro";

import {
  rgbToCmyk,
  rgbToHex,
  rgbToHsl,
  rgbToLab,
  rgbToName,
  rgbToPantone,
  rgbToRal,
} from "@/lib/colors";

const { color } = Astro.params;
if (!color) return Astro.redirect("/colors");

const [r, g, b] = color.split("-").map(Number);
const colorName = rgbToName({ r, g, b });
const description = `
  RGB: rgb(${r}, ${g}, ${b})
  HEX: ${rgbToHex({ r, g, b })}
  CMYK: ${rgbToCmyk({ r, g, b })}
  PANTONE: ${rgbToPantone({ r, g, b })}
  RAL: ${rgbToRal({ r, g, b })}
  LAB: ${rgbToLab({ r, g, b })}
  HSL: ${rgbToHsl({ r, g, b })}
`;
const image = `https://og.tailgraph.com/og?bgTailwind=bg-[${rgbToHex({ r, g, b })}]`;
---

<Layout
  customTitle={colorName}
  customDescription={description}
  customImage={image}
>
  <main
    class="flex max-h-svh flex-1 flex-col gap-2 bg-white p-5 pt-24 pb-32 text-neutral-900"
  >
    <figure
      data-color={color}
      id="colorPreview"
      class="aspect-[21/9] w-full rounded-2xl border border-neutral-800/10"
    >
    </figure>

    <h1 id="colorName" class="mt-2 text-lg font-bold capitalize"></h1>

    <div class="flex w-full items-center gap-2">
      <button
        id="save_color"
        class="flex grow items-center justify-center gap-1 rounded-full border border-neutral-900/20 p-3"
      >
        <Colors class="size-5" />
        <p class="text-sm">Guardar color</p>
      </button>

      <button id="share" class="rounded-full border border-neutral-900/20 p-3">
        <Share class="size-5" />
      </button>
    </div>

    <ul class="mt-4 flex flex-col overflow-y-auto">
      <li class="flex flex-col border-b border-neutral-900/10 py-2">
        <p class="text-xs font-semibold text-neutral-600">RGB</p>

        <button id="rgbOut" class="flex w-full items-center justify-between">
          <p>rgb(0, 0, 0)</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>

      <li class="flex flex-col border-b border-neutral-900/10 py-2">
        <p class="text-xs font-semibold text-neutral-600">HEX</p>

        <button id="hexOut" class="flex w-full items-center justify-between">
          <p>#000000</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>

      <li class="flex flex-col border-b border-neutral-900/10 py-2">
        <p class="text-xs font-semibold text-neutral-600">CMYK</p>

        <button id="cmykOut" class="flex w-full items-center justify-between">
          <p>0C 0M 0Y 0K</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>

      <li class="flex flex-col border-b border-neutral-900/10 py-2">
        <p class="text-xs font-semibold text-neutral-600">Pantone</p>

        <button
          id="pantoneOut"
          class="flex w-full items-center justify-between"
        >
          <p>Pantone 0</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>

      <li class="flex flex-col border-b border-neutral-900/10 py-2">
        <p class="text-xs font-semibold text-neutral-600">RAL</p>

        <button id="ralOut" class="flex w-full items-center justify-between">
          <p>RAL 0</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>

      <li class="flex flex-col border-b border-neutral-900/10 py-2">
        <p class="text-xs font-semibold text-neutral-600">LAB</p>

        <button id="labOut" class="flex w-full items-center justify-between">
          <p>lab(0% 0 0)</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>

      <li class="flex flex-col py-2">
        <p class="text-xs font-semibold text-neutral-600">HSL</p>

        <button id="hslOut" class="flex w-full items-center justify-between">
          <p>hsl(0 0% 0%)</p>
          <Dots class="pointer-events-none right-4 size-4 text-neutral-400" />
        </button>
      </li>
    </ul>
  </main>
</Layout>

<script>
  import {
    rgbToCmyk,
    rgbToHex,
    rgbToHsl,
    rgbToLab,
    rgbToName,
    rgbToPantone,
    rgbToRal,
    rgbToRgb,
  } from "@/lib/colors";
  import { toast_messages } from "@/lib/consts";
  import { deleteColor, loadColors, saveColor } from "@/lib/utils";
  import { toaster } from "@/lib/utils";
  import { nanoid } from "nanoid";

  const colorPreview = document.querySelector("#colorPreview") as HTMLElement;
  const colorName = document.querySelector("#colorName") as HTMLElement;

  const rgbOutButton = document.querySelector("#rgbOut") as HTMLElement;
  const rgbOut = rgbOutButton.querySelector("p") as HTMLElement;
  const hexOutButton = document.querySelector("#hexOut") as HTMLElement;
  const hexOut = hexOutButton.querySelector("p") as HTMLElement;
  const cmykOutButton = document.querySelector("#cmykOut") as HTMLElement;
  const cmykOut = cmykOutButton.querySelector("p") as HTMLElement;
  const pantoneOutButton = document.querySelector("#pantoneOut") as HTMLElement;
  const pantoneOut = pantoneOutButton.querySelector("p") as HTMLElement;
  const ralOutButton = document.querySelector("#ralOut") as HTMLElement;
  const ralOut = ralOutButton.querySelector("p") as HTMLElement;
  const labOutButton = document.querySelector("#labOut") as HTMLElement;
  const labOut = labOutButton.querySelector("p") as HTMLElement;
  const hslOutButton = document.querySelector("#hslOut") as HTMLElement;
  const hslOut = hslOutButton.querySelector("p") as HTMLElement;

  const saveColorButton = document.querySelector("#save_color") as HTMLElement;
  const shareButton = document.querySelector("#share") as HTMLElement;

  const color = colorPreview.dataset.color!;
  const colors = loadColors();
  const [r, g, b] = color.split("-").map(Number);
  const rgb_values = { r, g, b };

  colorPreview.style.backgroundColor = rgbToRgb(rgb_values);
  colorName.textContent = rgbToName(rgb_values);
  rgbOut.textContent = rgbToRgb(rgb_values);
  hexOut.textContent = rgbToHex(rgb_values);
  cmykOut.textContent = rgbToCmyk(rgb_values);
  pantoneOut.textContent = rgbToPantone(rgb_values);
  ralOut.textContent = rgbToRal(rgb_values);
  labOut.textContent = rgbToLab(rgb_values);
  hslOut.textContent = rgbToHsl(rgb_values);

  rgbOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToRgb(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  hexOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToHex(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  cmykOutButton.addEventListener("click", () => {
    navigator.clipboard
      .writeText(rgbToCmyk(rgb_values))
      .then(() => toaster(toast_messages.copied));
  });

  const colorExists = colors.find(({ rgb }) => {
    return rgbToRgb(rgb) === rgbToRgb(rgb_values);
  });

  if (colorExists) {
    const saveColorButtonLabel = saveColorButton.querySelector(
      "p"
    ) as HTMLElement;
    saveColorButtonLabel.textContent = "Eliminar color";
  }

  saveColorButton.addEventListener("click", () => {
    if (!colorName.textContent) return;

    if (!colorExists) {
      const promp = prompt(
        "Escribe un nombre para tu color",
        colorName.textContent
      );
      if (!promp) return;

      const color = {
        id: nanoid(),
        name: promp,
        rgb: rgb_values,
      };

      saveColor(color);
    } else {
      const check = confirm(
        "¿Estás seguro de que quieres eliminar este color?"
      );
      if (!check) return;

      deleteColor(colorExists);
      window.location.href = "/colors";
    }
  });

  shareButton.addEventListener("click", () => {
    const shareData = {
      url: window.location.href,
    };

    navigator.share(shareData);
  });
</script>
